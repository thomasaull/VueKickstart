// @use "sass:string";
@use '@/assets/scss/colors' as color;
@use '@/assets/scss/constants' as constant;

@forward '@/assets/scss/interpolate';
@forward '~@/../node_modules/include-media/dist/_include-media.scss' with (
  $breakpoints: constant.$breakpoints
);

// This does not work with the sass @use/@forward syntax:
// $breakpoints: map-merge($breakpoints, (tablet: 768px)); // to extend array use map-merge

@mixin svgIcon {
  width: 100%;
  height: 100%;
  fill: none;
  stroke: currentColor;
  stroke-width: 2px;
  overflow: visible;
  display: block;

  [id*='.fill'] {
    fill: currentColor;
    stroke: none;
  }

  & * {
    vector-effect: non-scaling-stroke;
  }
}

// USAGE:
// Default (all properties): @include transition-hover;
// Specific properties: @include transition-hover(transform opacity);
// Nested single: @include transition-hover(null, '.ParentClass');
// Nested multiple: @include transition-hover(null, ($block, '.ParentClass'));
// Alternatively you can use named parameters, for example:
// @include transition-hover($properties: all, $rootElements: ($block, '.ParentClass'));
// Use States
// @include transition-hover(null, null, ('highlighted')
@mixin transition-hover($properties: null, $rootElements: null, $states: null) {
  transition: all constant.$duration--hoverOut;

  @if $properties {
    transition-property: $properties;
  }

  // Default :hover'
  &:hover {
    transition: all constant.$duration--hoverIn;
    @if $properties {
      transition-property: $properties;
    }
  }

  // Transition on states
  @if $states {
    @each $state in $states {
      $stateClass: '.is-#{$state}';

      &#{$stateClass} {
        transition: all constant.$duration--hoverIn;
        @if $properties {
          transition-property: $properties;
        }
      }
    }
  }

  // Additional :hover on rootElements
  @if $rootElements {
    @each $rootElement in $rootElements {
      #{$rootElement}:hover & {
        transition: all constant.$duration--hoverIn;
        @if $properties {
          transition-property: $properties;
        }
      }

      // States on additional rootElements
      @if $states {
        @each $state in $states {
          $stateClass: '.is-#{$state}';

          #{$rootElement}#{$stateClass} & {
            transition: all constant.$duration--hoverIn;
            @if $properties {
              transition-property: $properties;
            }
          }
        }
      }
    }
  }
}

@mixin container {
  width: 100%;
  max-width: $contentMaxWidth;
  margin-left: auto;
  margin-right: auto;
}

@mixin containerWrap {
  padding-left: var(--space-smallest);
  padding-right: var(--space-smallest);
}

@mixin fullWidth {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
}

// https://css-tricks.com/aspect-ratio-boxes/#article-header-id-6
@mixin aspectRatioFlexible($ratio) {
  display: flex;

  &::before {
    content: '';
    width: 1px;
    margin-left: -1px;
    height: 0;
    padding-bottom: 100% / $ratio;
    pointer-events: none;
  }
}

// https://css-tricks.com/aspect-ratio-boxes/#article-header-id-7
@mixin aspectRatio($ratio) {
  position: relative;
  display: block;

  &::before {
    content: '';
    display: block;
    padding-bottom: 100% / $ratio;
  }

  & > :first-child {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin visuallyHidden {
  position: absolute;
  top: auto;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  width: 1px;
  height: 1px;
  white-space: nowrap;
}

@mixin hiddenWithoutJs {
  html.is-noJs & {
    display: none !important;
  }
}

@mixin truncateText($lines: 0) {
  overflow: hidden;

  @if $lines >= 2 {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
  } @else {
    white-space: nowrap;
    text-overflow: ellipsis;
  }
}

@mixin isKeyboard() {
  [data-whatinput='keyboard'] & {
    @content;
  }
}

// Usage:
// @include font-face("Meta", "/fonts/MetaPro-Normal");
// @include font-face("Meta", "/fonts/MetaPro-Bold", bold);
@mixin font-face($name, $file, $weight: null, $style: null) {
  @font-face {
    font-family: $name;

    // Legacy:
    // src: url($file+'.eot');
    // src: url($file+'.eot?#iefix') format('embedded-opentype'),
    //   url($file+'.woff2') format('woff2'), url($file+'.woff') format('woff'),
    //   url($file+'.ttf') format('truetype');

    //Modern:
    src: url($file+'.woff2') format('woff2'), url($file+'.woff') format('woff');
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
  }
}
